# .github/workflows/docker-publish.yml

name: Publish Docker Image to Docker Hub

# Controls when the action will run.
on:
  # Triggers the workflow on push events but only for the "main" branch
  # push:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use a standard Linux runner

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up QEMU for multi-platform builds (good practice)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Set up Docker Buildx, the modern builder toolkit
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Log in to Docker Hub using the secrets we stored
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Extract metadata (like tags) for the Docker image.
      # This is a powerful action that creates smart tags.
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # The full image name on Docker Hub
          images: sparshsing96/documentation-agent-api
          tags: |
            # Tag with 'latest' for the main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with the git short commit SHA (e.g., a1b2c3d)
            # This is great for versioning and rollbacks!
            type=sha

      # 6. Build the Docker image and push it to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Push the image to the registry
          push: true
          # Use the tags generated in the metadata step
          tags: ${{ steps.meta.outputs.tags }}
          # Use the labels generated in the metadata step
          labels: ${{ steps.meta.outputs.labels }}
          # Enable build cache to speed up future builds
          cache-from: type=gha
          cache-to: type=gha,mode=max